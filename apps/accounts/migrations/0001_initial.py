# Generated by Django 4.2.7 on 2025-05-30 22:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Adresse email utilisée pour la connexion', max_length=254, unique=True, verbose_name='Adresse email')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Prénom')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Nom')),
                ('user_type', models.CharField(choices=[('artist', 'Artiste'), ('organizer', 'Organisateur')], help_text="Définit si l'utilisateur est un artiste ou un organisateur", max_length=20, verbose_name="Type d'utilisateur")),
                ('is_staff', models.BooleanField(default=False, help_text="Détermine si l'utilisateur peut se connecter à l'admin", verbose_name='Statut équipe')),
                ('is_active', models.BooleanField(default=True, help_text='Détermine si ce compte utilisateur doit être considéré comme actif', verbose_name='Actif')),
                ('email_verified', models.BooleanField(default=False, help_text="Indique si l'adresse email a été vérifiée", verbose_name='Email vérifié')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'inscription")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'accounts_user',
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='Token')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('expires_at', models.DateTimeField(verbose_name='Expire le')),
                ('is_used', models.BooleanField(default=False, verbose_name='Utilisé')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Token de vérification email',
                'verbose_name_plural': 'Tokens de vérification email',
                'db_table': 'accounts_email_verification_token',
            },
        ),
        migrations.CreateModel(
            name='OrganizerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(help_text='Numéro de téléphone principal', max_length=20, verbose_name='Numéro de téléphone')),
                ('whatsapp_number', models.CharField(blank=True, help_text='Numéro WhatsApp pour contact direct', max_length=20, verbose_name='Numéro WhatsApp')),
                ('organization_name', models.CharField(blank=True, help_text="Nom de l'entreprise, église, association, etc.", max_length=200, verbose_name="Nom de l'organisation")),
                ('organization_type', models.CharField(choices=[('individual', 'Particulier'), ('company', 'Entreprise'), ('church', 'Église'), ('association', 'Association'), ('event_agency', 'Agence événementielle'), ('other', 'Autre')], default='individual', help_text="Type d'organisation ou particulier", max_length=20, verbose_name="Type d'organisation")),
                ('city', models.CharField(help_text='Ville de résidence ou siège social', max_length=100, verbose_name='Ville')),
                ('region', models.CharField(help_text='Région du Cameroun', max_length=100, verbose_name='Région')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organizer_profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil Organisateur',
                'verbose_name_plural': 'Profils Organisateurs',
                'db_table': 'accounts_organizer_profile',
                'indexes': [models.Index(fields=['city'], name='accounts_or_city_c036e3_idx'), models.Index(fields=['region'], name='accounts_or_region_ede299_idx'), models.Index(fields=['organization_type'], name='accounts_or_organiz_034787_idx')],
            },
        ),
        migrations.CreateModel(
            name='ArtistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage_name', models.CharField(blank=True, help_text='Nom artistique ou nom de scène (optionnel)', max_length=100, verbose_name='Nom de scène')),
                ('phone_number', models.CharField(help_text='Numéro de téléphone principal', max_length=20, verbose_name='Numéro de téléphone')),
                ('whatsapp_number', models.CharField(blank=True, help_text='Numéro WhatsApp pour contact direct', max_length=20, verbose_name='Numéro WhatsApp')),
                ('bio', models.TextField(blank=True, help_text='Description de votre parcours et style musical', verbose_name='Biographie')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/artists/', verbose_name='Photo de profil')),
                ('city', models.CharField(help_text='Ville de résidence', max_length=100, verbose_name='Ville')),
                ('region', models.CharField(help_text='Région du Cameroun', max_length=100, verbose_name='Région')),
                ('is_available', models.BooleanField(default=True, help_text="Indique si l'artiste est disponible pour de nouveaux contrats", verbose_name='Disponible')),
                ('rating_average', models.DecimalField(decimal_places=2, default=0.0, help_text='Note moyenne calculée automatiquement', max_digits=3, verbose_name='Note moyenne')),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text="Nombre total d'avis reçus", verbose_name="Nombre total d'avis")),
                ('profile_views', models.PositiveIntegerField(default=0, help_text='Nombre de fois que le profil a été consulté', verbose_name='Vues du profil')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='artist_profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil Artiste',
                'verbose_name_plural': 'Profils Artistes',
                'db_table': 'accounts_artist_profile',
                'indexes': [models.Index(fields=['city'], name='accounts_ar_city_dafb03_idx'), models.Index(fields=['region'], name='accounts_ar_region_2b16bf_idx'), models.Index(fields=['is_available'], name='accounts_ar_is_avai_efdccf_idx'), models.Index(fields=['rating_average'], name='accounts_ar_rating__3aa184_idx')],
            },
        ),
    ]
