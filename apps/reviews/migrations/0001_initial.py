# Generated by Django 4.2.7 on 2025-05-30 22:33

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(help_text='Note de 1 à 5 étoiles', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note')),
                ('comment', models.TextField(blank=True, help_text='Commentaire détaillé sur la prestation (optionnel)', verbose_name='Commentaire')),
                ('event_date', models.DateField(blank=True, help_text='Date à laquelle la prestation a eu lieu', null=True, verbose_name="Date de l'événement")),
                ('event_type', models.CharField(blank=True, choices=[('wedding_traditional', 'Mariage traditionnel'), ('wedding_civil', 'Mariage civil'), ('wedding_religious', 'Mariage religieux'), ('dowry', 'Dot/Libation'), ('funeral', 'Funérailles/Deuil'), ('baptism', 'Baptême'), ('mass', 'Messe/Service religieux'), ('prayer_vigil', 'Veillée de prière'), ('evangelization', "Croisade d'évangélisation"), ('gospel_concert', 'Concert gospel'), ('spiritual_retreat', 'Retraite spirituelle'), ('pilgrimage', 'Pèlerinage'), ('birthday', 'Anniversaire'), ('engagement', 'Fiançailles'), ('baby_shower', 'Baby shower'), ('new_year', "Fête de fin d'année"), ('new_year_eve', 'Réveillon'), ('dance_party', 'Soirée dansante'), ('company_party', "Fête d'entreprise"), ('corporate_event', "Événement d'entreprise"), ('product_launch', 'Lancement de produit'), ('seminar', 'Séminaire/Conférence'), ('charity_gala', 'Gala de charité'), ('political_event', 'Événement politique'), ('national_day', 'Fête nationale (20 mai)'), ('youth_day', 'Fête de la jeunesse (11 février)'), ('public_concert', 'Concert public'), ('music_festival', 'Festival de musique'), ('other', 'Autre')], help_text="Type d'événement pour lequel l'artiste a été engagé", max_length=30, verbose_name="Type d'événement")),
                ('event_location', models.CharField(blank=True, help_text="Ville ou lieu où s'est déroulé l'événement", max_length=200, verbose_name="Lieu de l'événement")),
                ('is_verified', models.BooleanField(default=False, help_text="Indique si l'avis a été vérifié par l'équipe", verbose_name='Avis vérifié')),
                ('is_public', models.BooleanField(default=True, help_text="Indique si l'avis est visible publiquement", verbose_name='Avis public')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='accounts.artistprofile', verbose_name='Artiste')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to='accounts.organizerprofile', verbose_name='Organisateur')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'db_table': 'reviews_review',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total des avis')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, verbose_name='Note moyenne')),
                ('rating_1_count', models.PositiveIntegerField(default=0, verbose_name='Avis 1 étoile')),
                ('rating_2_count', models.PositiveIntegerField(default=0, verbose_name='Avis 2 étoiles')),
                ('rating_3_count', models.PositiveIntegerField(default=0, verbose_name='Avis 3 étoiles')),
                ('rating_4_count', models.PositiveIntegerField(default=0, verbose_name='Avis 4 étoiles')),
                ('rating_5_count', models.PositiveIntegerField(default=0, verbose_name='Avis 5 étoiles')),
                ('last_review_date', models.DateTimeField(blank=True, null=True, verbose_name='Dernier avis')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('artist', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review_stats', to='accounts.artistprofile', verbose_name='Artiste')),
            ],
            options={
                'verbose_name': "Statistiques d'Avis",
                'verbose_name_plural': "Statistiques d'Avis",
                'db_table': 'reviews_review_statistics',
            },
        ),
        migrations.CreateModel(
            name='ReviewResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField(help_text="Réponse de l'artiste à l'avis", verbose_name='Réponse')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='artist_response', to='reviews.review', verbose_name='Avis')),
            ],
            options={
                'verbose_name': 'Réponse à un Avis',
                'verbose_name_plural': 'Réponses aux Avis',
                'db_table': 'reviews_review_response',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_email', models.EmailField(help_text="Adresse email du client pour recevoir la demande d'avis", max_length=254, verbose_name='Email du client')),
                ('client_name', models.CharField(blank=True, help_text='Nom du client (optionnel)', max_length=200, verbose_name='Nom du client')),
                ('client_phone', models.CharField(blank=True, help_text='Numéro de téléphone du client (optionnel)', max_length=20, verbose_name='Téléphone du client')),
                ('event_date', models.DateField(help_text='Date de la prestation', verbose_name="Date de l'événement")),
                ('event_type', models.CharField(choices=[('wedding_traditional', 'Mariage traditionnel'), ('wedding_civil', 'Mariage civil'), ('wedding_religious', 'Mariage religieux'), ('dowry', 'Dot/Libation'), ('funeral', 'Funérailles/Deuil'), ('baptism', 'Baptême'), ('mass', 'Messe/Service religieux'), ('prayer_vigil', 'Veillée de prière'), ('evangelization', "Croisade d'évangélisation"), ('gospel_concert', 'Concert gospel'), ('spiritual_retreat', 'Retraite spirituelle'), ('pilgrimage', 'Pèlerinage'), ('birthday', 'Anniversaire'), ('engagement', 'Fiançailles'), ('baby_shower', 'Baby shower'), ('new_year', "Fête de fin d'année"), ('new_year_eve', 'Réveillon'), ('dance_party', 'Soirée dansante'), ('company_party', "Fête d'entreprise"), ('corporate_event', "Événement d'entreprise"), ('product_launch', 'Lancement de produit'), ('seminar', 'Séminaire/Conférence'), ('charity_gala', 'Gala de charité'), ('political_event', 'Événement politique'), ('national_day', 'Fête nationale (20 mai)'), ('youth_day', 'Fête de la jeunesse (11 février)'), ('public_concert', 'Concert public'), ('music_festival', 'Festival de musique'), ('other', 'Autre')], help_text="Type d'événement", max_length=30, verbose_name="Type d'événement")),
                ('event_location', models.CharField(blank=True, help_text="Lieu où s'est déroulé l'événement", max_length=200, verbose_name="Lieu de l'événement")),
                ('token', models.UUIDField(default=uuid.uuid4, help_text="Token unique pour le lien d'avis", unique=True, verbose_name='Token')),
                ('message', models.TextField(blank=True, help_text="Message personnalisé à inclure dans l'email", verbose_name='Message personnalisé')),
                ('is_sent', models.BooleanField(default=False, help_text="Indique si l'email a été envoyé", verbose_name='Email envoyé')),
                ('is_used', models.BooleanField(default=False, help_text='Indique si le client a utilisé le lien pour laisser un avis', verbose_name='Lien utilisé')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Envoyé le')),
                ('expires_at', models.DateTimeField(help_text="Date d'expiration du lien", verbose_name='Expire le')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_requests', to='accounts.artistprofile', verbose_name='Artiste')),
            ],
            options={
                'verbose_name': "Demande d'Avis",
                'verbose_name_plural': "Demandes d'Avis",
                'db_table': 'reviews_review_request',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['artist'], name='reviews_rev_artist__e59612_idx'), models.Index(fields=['token'], name='reviews_rev_token_fa966e_idx'), models.Index(fields=['is_used'], name='reviews_rev_is_used_47f70e_idx'), models.Index(fields=['expires_at'], name='reviews_rev_expires_6c04f3_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpfulness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_helpful', models.BooleanField(help_text="Indique si l'utilisateur trouve l'avis utile", verbose_name='Utile')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpfulness_votes', to='reviews.review', verbose_name='Avis')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Vote d'Utilité",
                'verbose_name_plural': "Votes d'Utilité",
                'db_table': 'reviews_review_helpfulness',
                'indexes': [models.Index(fields=['review'], name='reviews_rev_review__8c3beb_idx'), models.Index(fields=['is_helpful'], name='reviews_rev_is_help_f40d46_idx')],
                'unique_together': {('review', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['artist', 'is_public'], name='reviews_rev_artist__4c5bb4_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='reviews_rev_rating_2db6dd_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_rev_created_bdcc91_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified'], name='reviews_rev_is_veri_f1ab6d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('artist', 'organizer', 'event_date')},
        ),
    ]
