# Generated by Django 4.2.7 on 2025-05-30 22:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtistGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': "Genre d'Artiste",
                'verbose_name_plural': "Genres d'Artistes",
                'db_table': 'artists_artist_genre',
            },
        ),
        migrations.CreateModel(
            name='ArtistInstrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='intermediate', help_text="Niveau de maîtrise de l'instrument", max_length=20, verbose_name='Niveau de maîtrise')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': "Instrument d'Artiste",
                'verbose_name_plural': "Instruments d'Artistes",
                'db_table': 'artists_artist_instrument',
            },
        ),
        migrations.CreateModel(
            name='ArtistRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom du rôle/spécialité', max_length=100, unique=True, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Description du rôle/spécialité', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si le rôle est disponible pour sélection', verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': "Rôle d'Artiste",
                'verbose_name_plural': "Rôles d'Artistes",
                'db_table': 'artists_artist_role',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WhatsAppClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicker_ip', models.GenericIPAddressField(help_text="Adresse IP de l'utilisateur", verbose_name='Adresse IP')),
                ('clicked_at', models.DateTimeField(auto_now_add=True, verbose_name='Cliqué le')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whatsapp_clicks', to='accounts.artistprofile', verbose_name='Artiste')),
                ('clicker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='whatsapp_clicks', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Clic WhatsApp',
                'verbose_name_plural': 'Clics WhatsApp',
                'db_table': 'artists_whatsapp_click',
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(help_text='Texte de la recherche', verbose_name='Requête')),
                ('filters_used', models.JSONField(blank=True, default=dict, help_text='Filtres appliqués lors de la recherche', verbose_name='Filtres utilisés')),
                ('results_count', models.PositiveIntegerField(help_text='Nombre de résultats retournés', verbose_name='Nombre de résultats')),
                ('user_ip', models.GenericIPAddressField(help_text="Adresse IP de l'utilisateur", verbose_name='Adresse IP')),
                ('searched_at', models.DateTimeField(auto_now_add=True, verbose_name='Recherché le')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='searches', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Requête de Recherche',
                'verbose_name_plural': 'Requêtes de Recherche',
                'db_table': 'artists_search_query',
            },
        ),
        migrations.CreateModel(
            name='ProfileView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewer_ip', models.GenericIPAddressField(help_text='Adresse IP du visiteur', verbose_name='Adresse IP')),
                ('referrer', models.URLField(blank=True, help_text='URL de la page précédente', null=True, verbose_name='Référent')),
                ('viewed_at', models.DateTimeField(auto_now_add=True, verbose_name='Vu le')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_views_log', to='accounts.artistprofile', verbose_name='Artiste')),
                ('viewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='viewed_profiles', to=settings.AUTH_USER_MODEL, verbose_name='Visiteur')),
            ],
            options={
                'verbose_name': 'Vue de Profil',
                'verbose_name_plural': 'Vues de Profils',
                'db_table': 'artists_profile_view',
            },
        ),
        migrations.CreateModel(
            name='MusicGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom du genre musical', max_length=100, unique=True, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='Description du genre musical', verbose_name='Description')),
                ('is_traditional', models.BooleanField(default=False, help_text="Indique si c'est un genre traditionnel camerounais/africain", verbose_name='Genre traditionnel')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si le genre est disponible pour sélection', verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Genre Musical',
                'verbose_name_plural': 'Genres Musicaux',
                'db_table': 'artists_music_genre',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['is_traditional'], name='artists_mus_is_trad_eb31ea_idx'), models.Index(fields=['is_active'], name='artists_mus_is_acti_1c0183_idx')],
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nom de l'instrument", max_length=100, unique=True, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='Slug')),
                ('category', models.CharField(choices=[('traditional', 'Traditionnel'), ('modern', 'Moderne')], default='modern', help_text="Catégorie de l'instrument", max_length=20, verbose_name='Catégorie')),
                ('description', models.TextField(blank=True, help_text="Description de l'instrument", verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'instrument est disponible pour sélection", verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Instrument',
                'verbose_name_plural': 'Instruments',
                'db_table': 'artists_instrument',
                'ordering': ['category', 'name'],
                'indexes': [models.Index(fields=['category'], name='artists_ins_categor_25a278_idx'), models.Index(fields=['is_active'], name='artists_ins_is_acti_5cec62_idx')],
            },
        ),
        migrations.CreateModel(
            name='ArtistRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='accounts.artistprofile', verbose_name='Artiste')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artists', to='artists.artistrole', verbose_name='Rôle')),
            ],
            options={
                'verbose_name': "Rôle d'Artiste",
                'verbose_name_plural': "Rôles d'Artistes",
                'db_table': 'artists_artist_role_assignment',
            },
        ),
        migrations.AddIndex(
            model_name='artistrole',
            index=models.Index(fields=['is_active'], name='artists_art_is_acti_68c94e_idx'),
        ),
        migrations.AddField(
            model_name='artistinstrument',
            name='artist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instruments', to='accounts.artistprofile', verbose_name='Artiste'),
        ),
        migrations.AddField(
            model_name='artistinstrument',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artists', to='artists.instrument', verbose_name='Instrument'),
        ),
        migrations.AddField(
            model_name='artistgenre',
            name='artist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genres', to='accounts.artistprofile', verbose_name='Artiste'),
        ),
        migrations.AddField(
            model_name='artistgenre',
            name='genre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artists', to='artists.musicgenre', verbose_name='Genre'),
        ),
        migrations.AddIndex(
            model_name='whatsappclick',
            index=models.Index(fields=['artist'], name='artists_wha_artist__d43ea1_idx'),
        ),
        migrations.AddIndex(
            model_name='whatsappclick',
            index=models.Index(fields=['clicked_at'], name='artists_wha_clicked_ff6886_idx'),
        ),
        migrations.AddIndex(
            model_name='whatsappclick',
            index=models.Index(fields=['clicker_ip'], name='artists_wha_clicker_711ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['searched_at'], name='artists_sea_searche_354fdb_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['user'], name='artists_sea_user_id_548f0e_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['user_ip'], name='artists_sea_user_ip_0ee3b7_idx'),
        ),
        migrations.AddIndex(
            model_name='profileview',
            index=models.Index(fields=['artist'], name='artists_pro_artist__171154_idx'),
        ),
        migrations.AddIndex(
            model_name='profileview',
            index=models.Index(fields=['viewed_at'], name='artists_pro_viewed__9ced0e_idx'),
        ),
        migrations.AddIndex(
            model_name='profileview',
            index=models.Index(fields=['viewer_ip'], name='artists_pro_viewer__6254e3_idx'),
        ),
        migrations.AddIndex(
            model_name='artistroleassignment',
            index=models.Index(fields=['artist'], name='artists_art_artist__8f5cb1_idx'),
        ),
        migrations.AddIndex(
            model_name='artistroleassignment',
            index=models.Index(fields=['role'], name='artists_art_role_id_40454b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='artistroleassignment',
            unique_together={('artist', 'role')},
        ),
        migrations.AddIndex(
            model_name='artistinstrument',
            index=models.Index(fields=['artist'], name='artists_art_artist__01e82d_idx'),
        ),
        migrations.AddIndex(
            model_name='artistinstrument',
            index=models.Index(fields=['instrument'], name='artists_art_instrum_687f3f_idx'),
        ),
        migrations.AddIndex(
            model_name='artistinstrument',
            index=models.Index(fields=['proficiency_level'], name='artists_art_profici_457c84_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='artistinstrument',
            unique_together={('artist', 'instrument')},
        ),
        migrations.AddIndex(
            model_name='artistgenre',
            index=models.Index(fields=['artist'], name='artists_art_artist__9e2bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='artistgenre',
            index=models.Index(fields=['genre'], name='artists_art_genre_i_c05b41_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='artistgenre',
            unique_together={('artist', 'genre')},
        ),
    ]
